name: build and push container image

on:
  workflow_call:
    inputs:
      image-name:
        description: image name
        type: string
        required: true
      context-directory:
        description: context directory
        type: string
        required: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}/${{ inputs.image-name }}
  # デフォルトブランチかタグの時のみPUSHする
  PUSH: ${{ github.event_name != 'pull_request' && ( github.ref_name == github.event.repository.default_branch || github.ref_type == 'tag' ) }}

jobs:

  meta-data:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    outputs:
      tags: ${{ steps.docker-metadata.outputs.tags }}
      labels: ${{ steps.docker-metadata.outputs.labels }}
      build-cache-name-2: ${{ steps.foo.outputs.build-cache-name-2 }}

    steps:

      - id: foo
        run: |
          set -e
          set -o pipefail
          foo=${{ env.IMAGE_NAME }}/build-cache-${{ github.run_number }}
          echo "build-cache-name-2=${foo#${{ github.repository_owner }}/}" | tee -a "$GITHUB_OUTPUT"

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,priority=100,event=tag
            type=sha,priority=400,format=short
            type=sha,priority=500,format=short,suffix=-{{date 'YYYYMMDDTHHmmss[Z]'}}

  build-arm64:
    needs:
      - meta-data

    env:
      arch: linux/arm64
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      build-cache-name: ${{ steps.generate-build-cache-name.outputs.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: env.PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate cache scope
        id: generate-cache-scope
        run: |
          arch=${{ env.arch }}
          echo "cache-scope=${{ github.ref_name }}-${arch//\//-}" | tee -a "$GITHUB_OUTPUT"
      
      - name: Generate build cache name and tag
        id: generate-build-cache-name
        run: echo "name=${{ env.REGISTRY }}/${{ github.repository }}/build-cache-$( dd if=/dev/urandom bs=15 count=1 | basenc --base32 --wrap=0 | tr '[A-Z]' '[a-z]' ):latest" | tee -a "$GITHUB_OUTPUT"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ inputs.context-directory }}
          platforms: ${{ env.arch }}
          tags: ${{ steps.generate-build-cache-name.outputs.name }}
          labels: ${{ needs.meta-data.outputs.labels }}
          outputs: ${{ env.PUSH == 'true' && 'type=registry' || 'type=oci,dest=/tmp/image.tar' }}
          cache-from: type=gha,scope=${{ steps.generate-cache-scope.outputs.cache-scope }}
          cache-to: type=gha,scope=${{ steps.generate-cache-scope.outputs.cache-scope }},mode=max

  build-amd64:
    needs:
      - meta-data

    env:
      arch: linux/amd64
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      build-cache-name: ${{ steps.generate-build-cache-name.outputs.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: env.PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate cache scope
        id: generate-cache-scope
        run: |
          arch=${{ env.arch }}
          echo "cache-scope=${{ github.ref_name }}-${arch//\//-}" | tee -a "$GITHUB_OUTPUT"

      - name: Generate build cache name and tag
        id: generate-build-cache-name
        run: echo "name=${{ env.REGISTRY }}/${{ github.repository }}/build-cache-$( dd if=/dev/urandom bs=15 count=1 | basenc --base32 --wrap=0 | tr '[A-Z]' '[a-z]' ):latest" | tee -a "$GITHUB_OUTPUT"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ inputs.context-directory }}
          platforms: ${{ env.arch }}
          tags: ${{ steps.generate-build-cache-name.outputs.name }}
          labels: ${{ needs.meta-data.outputs.labels }}
          outputs: ${{ env.PUSH == 'true' && 'type=registry' || 'type=oci,dest=/tmp/image.tar' }}
          cache-from: type=gha,scope=${{ steps.generate-cache-scope.outputs.cache-scope }}
          cache-to: type=gha,scope=${{ steps.generate-cache-scope.outputs.cache-scope }},mode=max

  combine-images:
    runs-on: ubuntu-latest
    needs:
      - meta-data
      - build-amd64
      - build-arm64
    permissions:
      contents: read
      packages: write
    if: ${{ github.event_name != 'pull_request' && ( github.ref_name == github.event.repository.default_branch || github.ref_type == 'tag' ) }}
    steps:
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: combine images
        run: |
          set -e

          amd64_image="${{ needs.build-amd64.outputs.build-cache-name }}"
          arm64_image="${{ needs.build-arm64.outputs.build-cache-name }}"
          multiarch_image="${{ needs.meta-data.outputs.tags }}"

          for a in $multiarch_image; do
            docker buildx imagetools create -t "$a" "$amd64_image" "$arm64_image"
            echo
          done
      
      - id: build-cache-name-2
        run: |
          foo=${{ needs.build-amd64.outputs.build-cache-name }}
          echo "amd64=${foo#${{ github.repository_owner }}/}" | tee -a "$GITHUB_OUTPUT"
          bar="${{ needs.build-arm64.outputs.build-cache-name }}"
          echo "arm64=${bar#${{ github.repository_owner }}/}" | tee -a "$GITHUB_OUTPUT"

      - uses: actions/delete-package-versions@v4
        continue-on-error: true
        with:
          package-name: "${{ needs.build-cache-name-2.outputs.amd64 }}"
          package-type: "container"
          min-versions-to-keep: 0

      - uses: actions/delete-package-versions@v4
        continue-on-error: true
        with:
          package-name: "${{ needs.build-cache-name-2.outputs.arm64 }}"
          package-type: "container"
          min-versions-to-keep: 0

  action-timeline:
    needs:
      - combine-images
    runs-on: ubuntu-22.04
    permissions:
      actions: read
    timeout-minutes: 10
    steps:
      - uses: Kesin11/actions-timeline@v2
